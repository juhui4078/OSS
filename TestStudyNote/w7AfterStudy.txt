R1. 알파벳 중복없이 정렬해서 출력하는 코드 보내기 (파일 명 grades 주어짐)
: cut -f1 grades | sort | uniq -c | sort -nr

R2. sort vs sort -n (1,11,111,2)
 : sort - 1, 11, 111, 2
 : sort nr - 1, 2, 11, 111


Q1. 파일 아무거나 열어서 수정하고 저장하고 나오기 (문서 편집기)
 : set -o vi
 : vi 파일
 -i : 현 커서에서 입력
 -a : 현 커서 한 칸 뒤에서 입력
 -o : 한 줄 추가 후 입력

 (w)q!

Q2. Linux에서 짝수로 끝나는 모든 파일 (파일 매칭, 와일드 카드)
 : grep Linux ch*[02468]

Q3. Linux에서 대문자로 시작하고, 언더스코어 포함되어 있는 파이썬 파일 매칭
(무슨 파일->확장자 사용, 시작과 포함 잘 보기, 나머지 연결선에 애스터라이크 사용)
 : grep Linux [A-Z]*_*.py

Q4. /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회하기
 : ls -l /etc*.conf (절대경로로 시작)


Q5. age라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다" 변수를 이용해서 출력한다.
 : age=23
 : echo "my age is $age"


Q6. mv <from> <to> 를 
 - 변수에 담아서 이동시키려면?
 : dir1=/mammals/*.txt 
 : mv dir1 replites

 - 패턴 매칭으로 이동시키려면?
 : mv /mammals/*.txt replites


Q7. 새로운 파일(sample.txt)이 생성되었을 때, 이 파일을 커밋하는 한 묶음의 코드를 작성하시오.
 : git status
 : git add sample.txt
 : git commit -m "done"


Q8. 명령어로 다음 디렉터리를 구현하시오.
 - 현재 위치 = company (root)
 - 노란 바탕의 'Folders'에 해당하는 부분을 구현한다.
  상위디렉터리 하위디렉터리 폴더

 : mkdir "Department X" "Department Y" "Shared infrastructure"
 : cd "Department Y"
 : mkdir "Team A" "Team B"
 : cd "Team B"
 : mkdir "Produtc 1" "Product 2"

Q9./etc/passwd 디렉터리에서 로그인하지 않은 경우의 갯수를 구하는 코드를 작성하시오
  daemon:x:1:1:daemon:/usr/sbin:/usur/sbin/nologin
  : grep 'nologin' /etc/passwd | wc -l 



Q10. /usr/lib에서 파일*의 개수를 알아내는 코드를 작성하시오
 : ls -l /usr/lib | cut -f1 | greb -v 'd' | wc -l


Q11. grades에서 파일의 개수를 알아내는 코드를 작성하시오
grades 파일에서 이름의 마지막 글자만 추출했을 때 알파벳의 중복 개수를 세는 코드를 작성하시오
 C Geraldine
 B Carmine
 A Kayla
 A Sophia

 : cut -f2 | rev | cut -c1 | sort | uniq -c | sort -nr



Q11. 현재 디렉터리에서 100개의 .jpg파일이 존재한다고 가정하자. 이 중 중복된 파일이 있는 지 확인하는 코드를 작성하라.(md5sum 프로그램을 활용할 수 있음)
 : md5sum *.jpg | cut -f1-32 | sort | uniq -c | sort -nr | grep -v "1"


Q12.sample.txt의 1번째 필드를 출력하되, 마지막 두글자만 출력하시오
- sample.txt예시 : python Programming Python 2010 Lutz,Mark
- 출력 값 예시 : on
 : cut -f1 sample.txt | rev | cut -c1-2 | rev 
 (파일명 까먹지 않기)


Q13. git 명령어
 - 버전 체크
 : --git version
 - 깃 초기화
 : git init
 - 상태 체크 
 : git status
 - 깃 커밋
 : git commit -m "your message"


Q14. 디렉터리 명령어
 - 상위 디렉터리(상위(위로가는)경로)
 : ..
 - 현재 디렉터리(현재경로순)
 : .
 - 루트
 : /
 - (현재위치)변경
 : cd
 - 복사 (경로는 상대경로에서 시작하는 것이 좋으므로 ./ or ../)
 : cp
 - (파일저장위치)이동 , 같은 디렉토리 내에서 파일 이름 변경
 : mv 
 - 현재 작업중인 디렉터리의 절대 경로 출력
 : pwd
 - 디렉터리 생성
 : mkdir
 - 빈디렉터리 삭제
 : rmdir
 - 꽉찬 디렉토리 강제 삭제 
 : rm -r
Q15. 명령어
 - 체크섬
 : md5sum




 - 페이지 단위로 출력
 : less
 - 파일 안에서 중복된 내용을 제거하고 보여줌
 : uniq
 - 파일 안에서 중복된 것을 수로 나타내줌
 : uniq -c

Q16. 정리

- 별명 명령어 (alias)
 1. 셸 인스턴스의 모든 별명과 그것에 대한 값 확인 alias
 2. 특정한 별명과 그 값 확인 alias 별명이름
 3. 정의된 별명 제거 unalias 삭제할별명이름
 4. 섀도잉 alais ls="ls -l"

Q17. 주의사항
- 확인만 하는 거면 굳이 cut 하지마셈 (항상 cut의 유무 확인하기)
- 파일인지 디렉터리인지 잘 보기 (디렉터리 아니면 다 파일 : grep -v d사용해서 파일 찾기)
- sort | uniq -c는 항상 세트
- 보여주면 딱 그것만 있는 것임
- 마지막으로 볼 때, 철자, 파일명 다시 보기!!


---------------
Q1. animals.txt에서 4번째 필드인 저자명 중 이름만(성 제외) 모두 출력하시오.
 - 텍스트 예시 : python ProgrammingPython 2010 Lutz, mark
  - 정답 예시 : mark

  : cut -f4 animals.txt | cut -d, -f2

Q3. 변수 USER 값을 출력하시오. 
 : printenv USER
 : echo $USER

Q4. alias ls="ls-l"에 대해 설명하시오.
- 기존 ls 기능을 가진 프로그램의 이름에 ls -l기능을 가지도록 한 섀도잉 기법
- 별명이  기존 명령보다 우선처리 됨
- 현재 셸에서만 영향을 줌

Q5. 숫자를 기준으로 내림차순하는 명령을 단축하는 코드를 작성하시오.
- alias sortnum="sort -nr"


Q6. 다음에 주어진 디렉터리에서, 현재 디렉터리를 Team A라고 가정할 때, Product2를 자주 사용하는 디렉터리로 저장(변수설정)하는 코드를 작성하고 그 디렉터리로 이동하시오.
- 경로를 ㅆ쓸때, 쌍따옴표 필수!!
:product2="$HOME/Company/Department Y/Team B/Product 2"
: cd product2


Q8. 짝수로 끝나는 .jpg파일 중 모음으로 시작하는 파일을 고르는 명령을 작성하시오.
: ls -l [aeiou]*[02468].jpg


Q11. 명령어로 다음의 디렉터리를 구현하시오.
 - 현재 위치 = company
 - 노란 바탕의 'Folders'에 해당하는 부분을 구현한다.
: mkdir "Department X" "Department Y" "Shared infrastructure"
: cd "Department Y"
: mkdir "Team A" "Team B"
: cd "Team B"
: mkdir "Product 1" "Product 2"

Q12. /usr/lib에서 파일의 개수를 알아내는 코드를 작성하시오.
: ls -l /usr/lib | cut -f1 | grep -v 'd' | wc -l 
****grep!!! p!!
*****cut 까먹지 말깅

Q14. /bin에 존재하는 파일 중 마지막 5개만 골라 앞 두 글자까지만 출력하시오. 
 : ls -l /bin | rev | head -n5 | cut -c1-2


----------------------------------------------

Q1. animals.txt에서 Perl 라인의 글자(character) 수 세고 결과를 파일로 (result). 입력도 리다이렉션 (한번에)
 : grep -w 'Perl' < animals.txt | wc -c > result 

Q2. 히스토리를 가장 처음부터 10개 출력하기 (1-10)
 : history | head -n1-10

- 가장 최근의 명령 중 숫자까지만 실행하는 것만 history <숫자> 쓰기
- 가장 처음부터 (오래된 것 부터)는 무조건 head 같이 써야함

Q3. 전체 히스토리 중 echo만 출력
 (echo를 가진 모든 명령 출력)
 history | grep -w 'echo'

- echo를 가진 가장 최근의 명령 출력 
 !!echo

Q4. 이전 명령의 단어(word) 수 세기 (표현식 많음)
!! | wc -w

******* :p -> !!(띄어쓰기X)
**HISTSIZE=-1
HISTCONTROL=ignoredups



- 표준 스트림이란?
 : 데이터를 입출력 하는 것

- 리다이렉션이란?
 : 입력을 파일에서 하거나, 출력 결과를 파일로 보내 저장하는 것 처럼 입출력의 방향을 바꾸는 것
 1. 출력 리다이렉션
  : 출력 내용을 화면 대신 파일로 보내 저장하는 것
   > : 파일이 없으면 새로운 파일을 만들고, 파일이 있으면 그 파일에 덮어쓰게 하는것 (복사)
   >> : 파일이 없으면 새로운 파일을 만들고, 파일이 있으면 이어 붙여서 씀 (추가)
   & : 오류를 리다이렉션과 함께 쓰고 싶을때
   ! : 파일의 유무와 상관없이 파일을 새로 만들고 리다이렉션을 하고 싶을때
   우선순위 : >&!

 2. 입력 리다이렉션
  : 키보드 대신 파일로 입력 받아 명령을 실행시키는 것
 - wc animals.txt
  : 프로그램이 파일명을 인수로 받아 실행되므로, 프로그램이 파일의 존재를 알기 때문에 화면에 파일명이 뜸
 - wc < animals.txt
  : 인수 없이 프로그램이 실행되므로, 표준 입력으로 입력을 받아, 프로그램이 파일의 존재를 모르기 때문에 파일명이 뜨지 않음
- 리다이렉션이 불가능한 경우
 : 표준 오류
 : 표준 오류만 출력 리다이렉션하고 싶을 때, 2>, 2>> 사용
- Escape lattrs
 : 특정 문자가 가지고 있는 기능을 차단하는 기능

 1) ''
  - 작은 따옴표 안의 모든 기능이 해제됨

 2) ""
  - 일부 기능만 해제

 3) /
  - 일부분을 지정해서 기능 해제
  - 백슬래쉬 뒤에 있는 문자를 문자 그대로 읽게 함
  - 별명 (섀도잉) 무효화 기능
  /ls animals.txt (이렇게 사용)
  - 줄 바꾸기 기능
"/"/" '""'

- 검색 경로
 echo $PATH
 : 우리가 사용하는 프로그램이 저장되어 있는 경로
 : 셸이 검색경로를 순차적으로 순회하여 프로그램을 가져옴
 : which, type(검색 경로 뿐만 아니라, 더 넓은 범위에서 경로 검색 , 별명)

- 초기화 파일 (셸의 환경 설정의 과정)
 : source - 사용자가 자주 사용하는 환경 설정을 저장하여 셸을 켤 때마다 적용되도록 한다.

 : 초기화 파일(.bru) 새로 지정
  # 초기화 파일 만들기
  # 적용하기
 : 기존 파일에 수정해서 지정
  # 파일 검색하기
  ls -a /$HOME #.이 있는 파일 까지 모두 보이도록 옵션 -a 사용하기
  # 파일 열기
  vi $HOME/.bru
  # 초기화 파일 수정하기
  1. 경로 설정하기
  PATH=
  2. 셸 프롬프트 설정하기
  P1S=
  3. 현재 위치 설정하기
  cd $HOME/
  4. 편집기 설정하기
  EDITOR
  5. 별명 설정하기
  alias d=
  6. 인삿말 설정하기
  echo ""
  # 적용하기 
  source $HOME/.bru

- 명령 히스토리 (command history)
 : 우리가 커멘드 라인에 입력한 명령을 셸이 모두 저장함
 : 이전 명령을 불러와서 사용할 수 있게 해줌
 history : 전체 히스토리 출력
 history 숫자 : 명령을 입력한 역순으로 숫자까지의 명령을 입력 순대로 출력
 (끝 -> )
 history -c : 모든 히스토리 삭제
 HISTSIZE=-1(무한저장)
 HISTCONTROL=ignoredups
 HISTFILESIZE=

- 재사용
 1) 커서링
  : 방향키를 이용해서 재사용하는 방법
  : 가장 최근 명령 2-3개를 재사용하기에 효율적임
  : 입력한 역순으로 명령을 불러옴 (위)

 2) 히스토리 확장 (딱 하나 지정)
  : 특별한 표현식으로 재사용하는 방법
  : 불러오고 실행시키기까지 하므로 주의해야함
  !!: 이전 명령
  !<명령어> : 해당 명령어가 있는 가장 최근의 명령
  !<숫자> : 입력한 순대로 해당 히스토리 번호를 가지고 있는 명령
  !<-숫자> : 입력한 역순을 기준으로 해당 히스토리 번호를 가지고 있는 명령
  :p 
  !!

 3) 증분 검색
  - Ctrl+R (중복이면, 원하는 만큼 Ctrl+R-중복 중 가장 최근의 명령 부터 나옴)
  - 암거나 치기
  - 원하는 거 맞으면 Enter
  - 나가기 : Esc, Ctrl+j+c+g

- 파일 삭제
 # 파일 조회 (확인)
  ls *.txt
 # 삭제
  rm !$ (가장 최근 명령의 마지막 단어)
  !* (가장 최근 명령의 모든 인수)

  -----------------------------------
  개념 시험
  1. 셸에서 명령의 세가지 의미를 서술하시오
  - 프로그램은 목적과 이름이 정해져 있고 실행이 가능하다
  - 단순명령은 프로그램이나 프로그램에 옵션이 붙여진 것이다.
  - 결합명령은 여러개의 단순 명령이당.

  - 표준입력은 stdin으로, 리눅스 운영체제가 키보드로 부터 입력받는 입력 스트림이다
  - 표준 출력은 stdout으로 화면에 결과를 출력하는 출력 스트림이다.
  ==> 프롬프트에 명령을 입력하면 표준 입력을 통해 명령이 입력되고, 이 명령의 출력값은 표준 출력을 통해 출력된다. 

  3. 셸에서 파이프란
  - 한 명령어의 출력 값을 다른 명령어의 입력 값으로 보낸다
  - 두 명령 사이에 삽입되어 명령을 조합하는 역할을 한다

  4. 셸이란 무엇인가요?
  - 사용자가 입력하는 명령을 읽고, 이해하며, 실행시킨다
  - 리눅스 커널과 사용자를 연결하는 인터페이스이다. 

  5. 깃의 세 가지 상태와 의미하는 바를 서술하시오
  - 수정 : 파일이 수정되었지만, 커밋을 하지 않은 상태
  - 스테이지 : 수정된 파일을 add하여 커밋할 준비가 된 상태
  - 커밋 : 스냅샷이 저장된 상태 

  6. 다음 두 코드의 차이점을 논하시오.
   - uniq sample.txt | sort
   - sort | uniq sample.txt
   : 1번째 코드는 정렬하지 않고 uniq를 진행하였으므로, 중복되더라도 인접하지 않은 것들은 중복으로 인식되지 않고 정렬되며, 2번째 코드는 정렬하고 uniq를 실행하였으므로, 같은 것끼리 나열된 다음, uniq하여 같은 것을 완전히 중복으로 보고 정렬된다. 

  7. alias ls="ls -l"에 대해 설명하시오.
  - ls 프로그램의 이름에 ls -l 기능이 적용되도록 한 섀도잉 기법이다
  - 현재 셸에서만 적용되며, 기존 프로그램보다 우선 처리된다

  8. 셸의 역할 4가지를 서술하시오
  - 와일드카드, 파이프라인 처리
  - 리다이렉션
  - 명령 실행

  9. 절대경로와 상대경로를 서술하시오.
  - 절대경로는 루트가 기준이 되는 경로이고,
  상대경로는 현재위치가 기준이 되는 경로이다.

  10. 다음 두 명령행의 차이를 서술하라
    - echo "Welcome, $USER"
    - echo 'Welcome, $USER'
  :1번째 코드는 ""안에 $USER가 사용되었으므로, $기능이 해제 되지 안아, 변수 값 그대로 출력되고, 2번째 코드는 ''안에 $USER가 사용되었으므로, $기능이 해제 되어 문자 그대로 출력된다.

  11. 셸에서 상속되는 3개의 표준 스트림을 설명하시오.
 - 표준 입력 : 리눅스 운영체제가 키보드로부터 입력받는 입력 스트림 
 - 표준 출력 : 출력값을 화면으로 출력하는 출력 스트림
 - 표준 오류 : 오류 데이터를 기록하는 출력 스트림이며, 표준 출력과는 별개로 작동 된다.

  12. head와 ls의 차이를 설명하시오.
  - ls는 파일 디렉토리를 리스트로 화면에 나타나게 하는 것이고, head는 지정한 줄 수 만큼 화면에 나타나게 하는 것이다. 

  13. 파이프 라인의 필터란? 예시도 함께
  - 필터란 파이프 라인을 사용할 수 있는 프로그램에서 입 출력 값을 수정할 있는 프로그램! -> grep, cut
  -------------------------
  Q1. OSS에서 notes/b를 현재 디렉토리로 복사해서 가져오는 코드 작성하기
  (pwd)
   runner
   ㄴOSS
    ㄴnotes
     ㄴb
     : cp ./OSS/notes/b .

  Q2. notes에서 runner로 한번에 가는 방법
  : cd ../.. (현재 경로에서 위로 가야하니, ..으로 시작)

  Q3. t가 들어있는 모든 파일
  : grep -l *'t'*

  Q4. 한 글자의 파일명, 두 글자의 파일명을 매칭하는 방법은?
  : grep ? (echo ?)
  : grep ?? (echo ??)

  Q5. o를 제외한 모든 소문자
  : [a-zo!]
  : [a-np-z]
  : [!o]

  Q6. 'who are you?'라는 디렉토리를 생성하고 목록 조회하는 코드 (세가지 Escape 모두 사용해서 만들기)
  1. ''
   : mkdir 'who are you?'
   : ls -l 'who are you?'

  2. ""
   : mkdir "who are you?"
   : ls -l "who are you?"

  3. \ (Escape letter는 백슬래쉬!!!)
   : mkdir who\ are\ you?
   : ls -l who\ are\ you?

  Q7. 10번째 글자부터 끝까지
   : cut -c10-

  Q8. 전체 파일에서 *패턴 가진 것 찾기
   : grep \'*'* (전체 파일이므로 경로ㄴ를 절대 경로로 시작)

  Q9. 해당 매칭(A)이 있는 파일 개수 
   : grep -l 'A'* | wc -l

  Q10. animals.txt에서 e를 x로 바꾸고 싶을땐? (덮어 씌우기)
   : tr 'e' 'x' > animals.txt

  Q11. animals.txt에서 소문자를 대문자로 바꾸고 싶을땐?
   : tr '[a-z]' '[A-Z]' > animals.txt

----------
Q1. 최근 15개 명령 히스토리를 history15에 저장하는 커맨드라인을 작성하라 
: history 15 > histroy15

Q2. 파일을 삭제할 때 재확인 하는 프로세스를 rm으로 지정하는 커맨드라인을 작성하라
: alias rm="rm -i"
****rm -i : 삭제하기 전에 확인
*****rm -r : 강제 삭제

Q3. 이전 명령의 글자 수를 세어라
!! | wc -c

Q4. 14번 명령 히스토리를 읽는 방법은?
: !14

Q5. 명령 히스토리에서 동일한 명령이 한번만 저장되도록 하려면?
: HISTCONTROL=ignoredups

Q6. 명령 히스토리를 1000개 저장하도록 커맨드라인을 작성하라
: HISTSIZE=1000

Q7. 파일이 classA,classB,...,classN까지 존재하고 파일에는 각 반의 학생 명ㄷ단이 있다고 가정하자. 전체 학생 명단을 담은 student_list파일을 생성하는 명령을 작성하ㅏ
class* > student_list

Q8. 셸 초기화 파일의 전체 디렉토리를 쓰시오
 : ~/.bashrc

Q9. 디렉토리명이 다음과 같다 "how are tou?" 이 디렉토리를 조회하는 커맨드라인을 작성하라
 : ls "how are you?"

*****조회 -> ls(-l은 빼세용)

Q10. 명령 히스토리에서 echo 명령만 골라 횟수를 세고 결과를 cd_history.txt.에 저장하라
(특정지점(최근만)-히스토리 확장, 그 전부터는 그냥 history 명령어 사용)
***history 명령어에서 명령어를 찾는 건 없으므로,항상 grep 사용!

history | grep -w 'echo' | wc -l > cd_history.txt