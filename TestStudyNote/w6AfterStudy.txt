R1. 알파벳 중복없이 정렬해서 출력하는 코드 보내기 (파일 명 grades 주어짐)
cut -f1 grades | sort | uniq -c 

R2. sort vs sort -n (1,11,111,2)
sort : 1, 11, 111, 2
sort -nr : 1, 2, 11, 111
Q1. 파일 아무거나 열어서 수정하고 저장하고 나오기 (문서 편집기)
set -o vi
vi 
-i : 현 커서에서 입력
-a : 현 커서에서 한 칸 뒤에서 입력
-o : 한줄 추가 후 입력


Q2. Linux에서 짝수로 끝나는 모든 파일 (파일 매칭, 와일드 카드)
grep Linux ch*[024658]

Q3. Linux에서 대문자로 시작하고, 언더스코어 포함되어 있는 파이썬 파일 매칭
grep Linux ch[A-Z]*_*.py

Q4. /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회하기
ls -l /etc/*.conf

Q5. age라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다" 변수를 이용해서 출력한다.
age=23
echo "my age is $age"

Q6. mv <from> <to> 를 
 - 변수에 담아서 이동시키려면?
 file=mammals/.txt
 mv file S

 - 패턴 매칭으로 이동시키려면?
mv mammaks/.txt S

Q7. 새로운 파일(sample.txt)이 생성되었을 때, 이 파일을 커밋하는 한 묶음의 코드를 작성하시오.
git status
git add sample.txt
git commit -m "done" (큰 따옴표)

Q8. 명령어로 다음 디렉터리를 구현하시오.
 - 현재 위치 = company (root)
 - 노란 바탕의 'Folders'에 해당하는 부분을 구현한다.
  상위디렉터리 하위디렉터리 폴더
  : mkdir "Department X" "Department Y" "Shared infrastructure"
   cd "Department Y"
   mkdir "Team A" "Team B"
   cd "Team B"
   mkdir "Product 1" "Product 2"

Q9./etc/passwd 디렉터리에서 로그인하지 않은 경우의 갯수를 구하는 코드를 작성하시오
  daemon:x:1:1:daemon:/usr/sbin:/usur/sbin/nologin
  : grep -w nologin /etc/passwd | wc -l


Q10. /usr/lib에서 파일*의 개수를 알아내는 코드를 작성하시오
: ls -l /usr/lib | cut -c1 | grep -v d | wc -l

Q11. grades에서 파일의 개수를 알아내는 코드를 작성하시오
grades 파일에서 이름의 마지막 글자만 추출했을 때 알파벳의 중복 개수를 세는 코드를 작성하시오
 C Geraldine
 B Carmine
 A Kayla
 A Sophia

: cut -f2 grades | rev | cut -c1 | sort | uniq-c

Q11. 현재 디렉터리에서 100개의 .jpg파일이 존재한다고 가정하자. 이 중 중복된 파일이 있는 지 확인하는 코드를 작성하라.(md5sum 프로그램을 활용할 수 있음)
: md5sum *.jpg | cut -f-32 | sort | uniq-c | sort -nr | grep -v "1"

Q12.sample.txt의 1번째 필드를 출력하되, 마지막 두글자만 출력하시오
- sample.txt예시 : python Programming Python 2010 Lutz,Mark
- 출력 값 예시 : on
: cut -f1 sample.txt | rev | cut -c-2 | rev

Q13. git 명령어
 - 버전 체크
git --version
 - 깃 초기화
git init
 - 상태 체크 
git status
Q14. 디렉터리 명령어
 - 상위 디렉터리
..
 - 현재 디렉터리
.
 - 루트
/
 - (현재위치)변경
cd
 - 복사
cp
 - (파일저장위치)이동 
mv
 - 현재 작업중인 디렉터리의 절대 경로 출력
  pwd
 - 디렉터리 생성
  mkdir
 - 디렉터리 삭제
  rmdir
Q15. 명령어
 - 체크섬
  : md5sum
 - 파일 매칭만 할때 (와일듵카드) 
  파일 골라라 ls 


 - 페이지 단위로 출력
  : less
 - 파일 안에서 중복된 내용을 제거하고 보여줌
  : uniq
 - 파일 안에서 중복된 것을 수로 나타내줌
  : uniq -c
Q16. 정리
 - 프롬프트

 - 셸

 - 파일 매칭

 - 와일드 카드의 종류
  1. *
   - 파일이나 디렉터리 경로에서 0개 이상의 연속열과 일치하는 것으로 간주돔
  2. ?
  - 파일이나 디렉터리 경로에서 한 글자와 일치하는 것으로 간주됨
  3. []
  - 파일이나 디렉터리 경로에서 대괄호에 열거되어 있는 것과 한개라도 같으면 일치하는 것으로 간주됨

- 변수

- 별명

- 별명 명령어 (alias)
 1. 셸 인스턴스의 모든 별명과 그것에 대한 값 확인 
 2. 특정한 별명과 그 값 확인 
 3. 정의된 별명 제거 

Q17. 주의사항
- 확인만 하는 거면 굳이 cut 하지마셈 (항상 cut의 유무 확인하기)
- 파일인지 디렉터리인지 잘 보기 (디렉터리 아니면 다 파일 : grep -v d사용해서 파일 찾기)
- sort | uniq -c는 항상 세트
- 보여주면 딱 그것만 있는 것임
- 마지막으로 볼 때, 철자, 파일명 다시 보기!!

Q18. 문저 편집기
vim : 

- 특징
 : 
 : 
 : 

---------------
Q1. animals.txt에서 4번째 필드인 저자명 중 이름만(성 제외) 모두 출력하시오.
 - 텍스트 예시 : python ProgrammingPython 2010 Lutz, mark
  - 정답 예시 : mark
  : cut -f4 animals.txt | cut -d, -f2

Q2. sample.txt의 1번째 필드를 출력하되, 마지막 두 글자만 출력하시오.
- 텍스트 예시 : python ProgrammingPython 2010 Lutz, mark
- 정답 예시 : on
 : cut -f1 sample.txt | rev | cut -c-2 | rev

Q3. 변수 USER 값을 출력하시오. 
 : printenv USER
 : echo $USER

Q4. alias ls="ls-l"에 대해 설명하시오.
 : 기존 ls 기능을 가진 프로그램 명에 ls -l 기능을 적용하는 섀도잉 기법이다. 
 : 기존 명령보다 우선 처리됨
 : 현재 셸에서만 영향을 줌

Q5. 숫자를 기준으로 내림차순하는 명령을 단축하는 코드를 작성하시오.
 alias sortnum="sort -nr"

Q6. 다음에 주어진 디렉터리에서, 현재 디렉터리를 Team A라고 가정할 때, Product2를 자주 사용하는 디렉터리로 저장(변수설정)하는 코드를 작성하고 그 디렉터리로 이동하시오.
- 경로를 ㅆ쓸때, 쌍따옴표 필수!!
: product2="$HOME/Company/Department Y/Team B/Product 2"
  cd $product2

Q7. 셸의 역할 세 가지를 서술하시오.
 : 와일드 카드 처리
 : 파이프라인 처리
 : 리다이렉션
 : 프로그램 명령 실행

Q8. 짝수로 끝나는 .jpg파일 중 모음으로 시작하는 파일을 고르는(ls) 명령을 작성하시오.
 : ls -l [aeiou]*[02468].jpg

Q9. 현재 디렉터리에 100개의 .jpg파일이 존재한다고 가정하자. 이 중 중복된 파일이 있는지 확인하는 코드를 작성하라.
 : md5sum*.jpg | cut -f1-32 | sort | uniq -c | sort -nr | grep -v "1"

Q10. 절대경로와 상대경로를 서술하시오.
 : 절대경로는 루트가 기준이 되는 경로이고, 상대경로는 현재 위치가 기준이 되는 경로이다.

Q11. 명령어로 다음의 디렉터리를 구현하시오.
 - 현재 위치 = company
 - 노란 바탕의 'Folders'에 해당하는 부분을 구현한다.
  : mkdir "Department X" "Department Y" "Shared infrastructure"
  : cd "Department Y"
  : mkdir "Team A" "Team B"
  : cd "Team B"
  : mkdir "Product 1" "Producr 2"

Q12. /usr/lib에서 파일의 개수를 알아내는 코드를 작성하시오.
 : ls -l /usr/lib | cut -c1 | grep -v d | wc -l

Q13. grades 파일에서 이름의 마지막 글자만 추출했을 때 각 알파벳의 중복 개수를 세는 코드를 작성하시오.
 C Geraldine
 B Carmine
 A Kayla
 A Sophia
 B Haresh
 C Liam
 B Elijah
 B Emma
 A Olivia
 D Noah

 : cut -f2 grades | rev | cut -c1 | sort | uniq -c 

Q14. /bin에 존재하는 파일 중 마지막 5개만 골라 앞 두 글자까지만 출력하시오. 
 : ls -l /bin | rev | head -n5 | cut -c-2

----------------------------------------------

Q1. animals.txt에서 Perl 라인의 글자(character) 수 세고 결과를 파일로 (result). 입력도 리다이렉션 (한번에)
 : grep -w Prel < animals.txt | wc -c > result

Q2. 히스토리를 가장 처음부터 10개 출력하기 (1-10)
 : history | head -n10
- 가장 최근의 명령 중 숫자까지만 실행하는 것만 history <숫자> 쓰기
- 가장 처음부터 (오래된 것 부터)는 무조건 head 같이 써야함

Q3. 전체 히스토리 중 echo만 출력
 history | grep -w echo (echo를 가진 모든 명령 출력)
 history | grep echo
- echo를 가진 가장 최근의 명령 출력 
: !echo

Q4. 이전 명령의 단어(word) 수 세기 (표현식 많음)
!! | wc -w

- 표준 스트림이란?
 : 데이터를 입출력 하는 것

- 리다이렉션이란?
 : 입력을 파일에서 하거나, 출력 결과를 파일로 보내 저장하는 것 처럼 입출력의 방향을 바꾸는 것
 1. 출력 리다이렉션
  : 출력 내용을 화면 대신 파일로 보내 저장하는 것
   > : 파일이 없으면 새로운 파일을 만들고, 파일이 있으면 그 파일에 덮어쓰게 하는것 (복사)
   >> : 파일이 없으면 새로운 파일을 만들고, 파일이 있으면 이어 붙여서 씀 (추가)
   & : 오류를 리다이렉션과 함께 쓰고 싶을때
   ! : 파일의 유무와 상관없이 파일을 새로 만들고 리다이렉션을 하고 싶을때
   우선순위 : >&!

 2. 입력 리다이렉션
  : 키보드 대신 파일로 입력 받아 명령을 실행시키는 것
 - wc animals.txt
  : 프로그램이 파일명을 인수로 받아 실행되므로, 프로그램이 파일의 존재를 알기 때문에 화면에 파일명이 뜸
 - wc < animals.txt
  : 인수 없이 프로그램이 실행되므로, 표준 입력으로 입력을 받아, 프로그램이 파일의 존재를 모르기 때문에 파일명이 뜨지 않음
- 리다이렉션이 불가능한 경우
 : 표준 오류
 : 표준 오류만 출력 리다이렉션하고 싶을 때, 2>, 2>> 사용

- Escape lattrs
 : 특정 문자가 가지고 있는 기능을 차단하는 기능

 1) ''
  - 작은 따옴표 안의 모든 기능이 해제됨

 2) ""
  - 일부 기능만 해제

 3) \
  - 일부분을 지정해서 기능 해제
  - 백슬래쉬 뒤에 있는 문자를 문자 그대로 읽게 함
  - 별명 (섀도잉) 무효화 기능
  /ls animals.txt (이렇게 사용)
  - 줄 바꾸기 기능
"/"/" '""'

- 검색 경로
 echo $PATH
 : 우리가 사용하는 프로그램이 저장되어 있는 경로
 : 셸이 검색경로를 순차적으로 순회하여 프로그램을 가져옴
 : which, type(검색 경로 뿐만 아니라, 더 넓은 범위에서 경로 검색 , 별명)

- 초기화 파일 (셸의 환경 설정의 과정)
 : source - 사용자가 자주 사용하는 환경 설정을 저장하여 셸을 켤 때마다 적용되도록 한다.

 : 초기화 파일(.bru) 새로 지정
  # 초기화 파일 만들기
  # 적용하기
 : 기존 파일에 수정해서 지정
  # 파일 검색하기
  ls -a /$HOME #.이 있는 파일 까지 모두 보이도록 옵션 -a 사용하기
  # 파일 열기
  vi $HOME/.bru
  # 초기화 파일 수정하기
  1. 경로 설정하기
  PATH=
  2. 셸 프롬프트 설정하기
  P1S=
  3. 현재 위치 설정하기
  cd $HOME/
  4. 편집기 설정하기
  EDITOR
  5. 별명 설정하기
  alias d=
  6. 인삿말 설정하기
  echo ""
  # 적용하기 
  source $HOME/.bru

- 명령 히스토리 (command history)
 : 우리가 커멘드 라인에 입력한 명령을 셸이 모두 저장함
 : 이전 명령을 불러와서 사용할 수 있게 해줌
 history : 전체 히스토리 출력
 history 숫자 : 명령을 입력한 역순으로 숫자까지의 명령을 입력 순대로 출력
 history -c : 모든 히스토리 삭제
 HISTSIZE=-1(무한저장)
 HISTCONTROL=ignoredups
 HISTFILESIZE=

- 재사용
 1) 커서링
  : 방향키를 이용해서 재사용하는 방법
  : 가장 최근 명령 2-3개를 재사용하기에 효율적임
  : 입력한 역순으로 명령을 불러옴 (위)

 2) 히스토리 확장 
  : 특별한 표현식으로 재사용하는 방법
  : 불러오고 실행시키기까지 하므로 주의해야함
  !!: 이전 명령
  !<명령어> : 해당 명령어가 있는 가장 최근의 명령
  !<숫자> : 입력한 순대로 해당 히스토리 번호를 가지고 있는 명령
  !<-숫자> : 입력한 역순을 기준으로 해당 히스토리 번호를 가지고 있는 명령
  :p 
  !!

 3) 증분 검색
  - Ctrl+R (중복이면, 원하는 만큼 Ctrl+R-중복 중 가장 최근의 명령 부터 나옴)
  - 암거나 치기
  - 원하는 거 맞으면 Enter
  - 나가기 : Esc, Ctrl+j+c+g

- 파일 삭제
 # 파일 조회 (확인)
  ls *.txt
 # 삭제
  rm !$ (가장 최근 명령의 마지막 단어)
  !* (가장 최근 명령의 모든 인수)