수업 끝나고 항상 
 : git status
   git commit -m "your msg"

#1. 리다이렉션 
 - 표준 스트림이란?
  - 파일을 읽고 쓰는 과정처럼 데이터를 입출력하는 것
  - 데이터가 연속저그로 흐른다는 특징
  - 키보ㅡ -> 운영체제 -> 디스플레이
   - studin
   - stdout
   - stderr
   - out/ err 다른 방식으로 (루트로) 출력된다.

- 리다이렉션이란? 
 - 입출력 방향을 다른 곳으로 바꾼
 - 키보드에서 입력을 받지 않고, 파일에서 받는 것
 - 디스플레이 -> 파일 (디스플레이로 받지 않고 파일로 쓰는)
   ex) ls -l -> 파일로 저장한다.

- 리다이렉션 역시 셸의 역할이다. (운영체제와 파일을 연결하느 작업)
 ## 1) 출력 리다이렉션
  - 출력 내용을 표준 출려기 아닌 파일로 보내 저장하는 것
  - syntax: 명령 '>' 파일이름
  --> 명령의 출력 값은 파일이름으로 저장되고, 사용자에게는 안보임

  ## cat 
   - conatenate: 연속으로 이어 붙인다.
   - cat 파일이름1,2,3, .....
    - 파일 1 + 2 + 3 ....
    - 파일 1 2 
   - 하나 이상의 파일을 다른 여러 종류의 파일과 연결할 때 많이 사용한다.
    - 파일 복사, 합침, ..
    - 추가 >>

    ex) 
     : cat grades letters
       cat grades lettes > grades_letters
       cat grades_letters

       cat grades > grades2 (복사)

       cat grades2 >> letters (추가)
       cat letters

 ## 2) 입력 리다이렉션
 - 명령 < 파일

 <차이 : 파일 명의 유무>
  - wc animals.txt : 프로그램이 파일의 존재를 알고 있음, 파일명이 뜸
  - wc < animals.txt : 리다이렉션을 했기 떄문에 프로그램이 파일 존재를 모르고 어디선가 받아와서 명령을 수행했으므로 파일명이 안뜸

 ## 3) 리다이렉션이 불가능한 출력
  - 표준 오류는 리다이렉션이 불가능하다.
  - 지나가는 경로가 달라서 그냥 리다이렉션이 불가능함
  - 단, '2>'를 사용하면 리다이렉션이 가능하다.
  - 2>> : 
  - 경로의 #숫자 에서 숫자는 그냥 있는 것이 아니라 애스터리스크를 뜻함

  - 표준 출력과 오류를 같이 리다이렉션하려면? &>
   ex) 존재하는 파일과 존재하지 않는 파일 모두를 읽어서 새로운 파일을 만들자
    line.txt non.txt -> line2. txt
    : echo this is a file > line.txt
      cat line1.txt non.txt &> line2.txt
     2>> (line2가 원래 있었고, 그 뒤에 이어 쓰는 것)
     2> (stdout err(X))
    - 존재하지 않는 파일은 에러가 뜨고, 존재하는 파일은 내용이 저장됨


   ex) 
    : cp non.txt file.txt 2> result

  ## 4) 입출력 모두 다 같이
   - 명령 < 입력파일 > 출력파일
  Q1. animals.txt에서 Perl 라인의 글자(character) 수 세고 결과를 파일로 (result). 입력도 리다이렉션 (한번에)
   : grep Perl < animals.txt | wc -l > result

   - ls, head, echo, cat (알아서 구글링해서 차이 잘 기억하셈)

   #2. Escape Letters
   - 특정 문자가 가지고 있는 기능을 차단하게 해주는 기능 => 기능을 하지 않고 입력 그대로 출력하는 것
    ex) \n -> \\n(기능차단) , \t -> \\t(기능차단) 
   - \ (역슬래시, 백슬래시)
   - \$HOME --> '$HOME'으로 출력됨
    1) ''
     - 제일 강력한 역할 --> 작은 따옴표 안의 모든 기능을 해제함
     - 안에 있는 모든 기능 해제함
     - 하나의 문자열이라는 것을 표시할 때도 사용
     - 예: $HOME (문자 그대로 출력)

    2) ""
     - 일부 기능은 해제하지 않음

    3) \
     - 일부분을 지정해서 기능을 해제(문자 그대로 읽게 함)

     - 큰 따옴표 안에 큰 따옴표를 사용하려면? 
      : \""\ -> "" 출력됨
     - 명령 줄 바꿔 쓰기 할 때 많이 씀
      : '\'를 하고 엔터를 치면, 평소처럼 바로 프로그램이 실행되는 것이 아니라, 다음 줄에서 명령을 계속 이어쓸 수 있음
        |\

        : cut -c animals.txt \
         | grep ....\
         | head ..... 
        (명령 줄 바꾸기 할 때, 파이프 라인의 위치를 맞춰서 쓰는 게 심미적으로 이쁨)
     - 별명 무효화 기능
      alias grep="grep -w"
      \grep

    #3. 검색경로
     - /usr/bin
     - $PATH
      : 기준으로 개행 붙여서 출력하라.
     - tr <A> <B> : A -> B로 변경함
     - 우리가 사용하는 프로그램이 저장되어 있는 경로
     - 셸이 검색 경로를 순차적으로 순회하며 프로그램을 가져온다.
     - 검색 경로 확인 명령 : which, type
      - type은 검색경로 뿐만 아니라 더 넓은 범위에서 경로 조회
     (별명까지)
      - 별명이 검섹 경로를 우선한다.

     #4. 초기화 파일
      - shell environment 
      - 초기화 파일 -> default 값을 설정하는 파일
      - 'ls -a $HOME' # -a : 숨겨진 파일까지 모두 출력
      - $HOME/.bashrc

      - vi로 파일 열기
       : vi $HOME/.bashrc
         입력하고 -> wq!를 해야지 입력한 내용이 저장이 됨
         source $HOME/.bashrc
         (변경한 내용을 적용)
      - source
       : 사용자가 자주 사용하는 환경 설정을 저장하여 항상 셸을 켤 때마다 적용되도록 한다.

     #5. 명령 히스토리
      - command history
       : 우리가 커맨드라인에 입력한 명령들으 셸이 저장해서 가지고 있다. 
       : 히스토리를 사용해서 이전 명령을 불러와 재상하는 기능을 익힌다. 


     ##1) 히스토리 열람
      - history --> 현재 시점까지 코드를 입력한 기록
      - LIFO (last in first out)
      - history 10
      - 옵션 -c : 전부를 지울 수 있음

      Q2. 히스토리를 가장 처음부터 10개 출력하기 (1-10)
       : history | head -n10 (head는 10이 default라서 -n10은 생략 가능)

      Q3. 전체 히스토리 중 echo만 출력
       : history | cut -f1 | grep echo 
       : history | grep echo

     ##2) 재사용
      1. 커서링
      2. 히스토리 확장
      3. 증분 검색 

      ###1. 커서링
       - 위아래 키를 사용하여 히스토리 열람
       - 이전 2-3개 명령일 경우 사용
       - 입력한 역순으로 이전 명령을 불러옴
       - 몇개 까지 가능하냐 -> $HISTSIZE 사용 , 내가 개수를 다시 정의해도 됨
       - $HISTSIZE=-1 #무한 저장

       반복되는 명령은?
       - $HISTCONTROL=ignoredups # 중복되는 명령어 하나만 저장

       - 모든 명령 히스토리는 $HISTFILE에 저장된다. 
       (모든 히스토리는 $HISTSIZE만큼 $HISTFILE에 저장되고 있음)

     ###2. 히스토리 확장
       - 특벼한 표현식을 활용하는 방법
       - 명령을 가져오고 실행까지 함
       - !! : 이전 명령
       - !<명령어> : 가장 마지막에 한 특정 명령 가져와서 실행
       - !70 (히스토리 번호) : 특정열을 가져와서 실행을 한다 
       -!-3

       - 장점 : 쉽다
       - 단점 : 실행까지 되기 때문에 조심할 것
       - :p - 확인 (실행은 안하고, 내가 한 것을 보여줌 그래서 이를 통해 확인하고 의도와 맞으면 실행시키셈, 바로 실행되서 생기는 위험을 줄여줌)

     Q4. 이전 명령의 단어(word) 수 세기 (표현식 많음)
      : !! | wc -w

      - stdout으로 황용할 수 있다는 점 
      - 파일 삭제할 떄
       - !$ : 이전 명령의 마지막 내용
       - head grades2 ($)
       - !* : 내용이 

    ###3. 증분 검색
     - ctrl + R
     - enter
     -> 빠져나가기 : ESC, ctrl +j or +c (해당 셸을 나가고 새로운 셸로?)

     --> 요약 : 명령행 편집 횽ㄹ적으로 잘하자 