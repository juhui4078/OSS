- 정규표현식 ### 이때만 ''사용해주기 
- grep
- ed
- sed ### (5장, 책보다 자주 배울 것임)

->* grep 명령어는 정규 표현식과 조합해서 패턴 매칭으로 자주 쓰이는 편임
->* 문자열 패턴 매칭을 검사하거나 문자열을 치환하기 위해 사용되는 문법임
--->* 정규 표현식의 규칙에 매칭 되는지 여부가 검사되게 됨

#1. 정규표현식

- 패턴 매칭할 때 사용한다.
- 1 line  기준
- 가장 긴 문자열을 매칭함
 *** 패턴 매칭은 라인 기준이다 ***


   ##4. [리스트]
    - [a-z]
    - [a-np-z] # o를 제외한 모든 소문자
    - [a-n][p-z] # 한 괄호가 한글자 취급이므로, 두글자로 취급됨
    - grep '[Tt]he' animals.txt # animals.txt에서 대문자 소문자
  (t) 상관없이 사용하고 싶을 때
  T와 t 중 하나만 일치하면 패턴매칭 성공~!

    - grep -i 'the' animals.txt # -i: 대문자 소문자 상관 안한다
    -w : 단어 단위로 매칭 


   ##5. *
    - zero or more
    - x* x......
    - 앞글자 한정
    - x 시작하는 단어
     xx*(O)
     x*(X)
     ^xx* : 라인 맨 처음에 있는 x로 시작하는 단어
    - 가장 긴 문자열을 매칭함 

   ##6. \+
    - 1개 이상
     x\+

   ##7. \?
    - zero or more

      ------
      '^a' - a로 시작하는 행
      'a$' - a로 끝나는 행
      'a..' - a 뒤에 두 글자만 올 수 있음 (?)와 비슷
      [^a]  - a를 제외하고 ###대괄호 안에 ^가 있으면 ^ 뒤의 내용을 제외한다는 의미
      a | b --- a나 b중 하나라도 있으면 검색

      중괄호는 번수
      a\{n\} - a가 n번 반복
      a\{n,\} - a가 적어도 n번이상 반복
      a\{n,m\} - a가 n번 이상 n번 이하 반복

      소괄호는 곱하기
      \(linux\)A\1B ---> linuxAlinuxB

      --------

   #Q.
   1) a-f까지 매칭
    : grep [a-f]

   2) b나 ab 매칭
    : grep \(b\)\1\a1

   3) 2번 + aaaaaab매칭 #100개
    : grep \(b\)\1\a*1

   4) 모든 글자 매칭
    : grep *

   5) #으로 시작하는 문장 매칭
    : grep ^#

   6) \으로 끝나는 문장 매칭
    : grep \$

   7) 대문자로 시작하지 않는 문장 매칭
    : grep ^[^A-Z]
    : grep ^[!A-Z]

   8) 빈줄이 아닌 모든 줄 매칭
    : grep [^^ $]
    : grep [!^ $]

   9) cookie나 cake 포함된 줄 매칭
    : grep 

   10) w. 매칭

   --------------------

##1. 확장
\w [a-zA-Z0-9_]
\W (not) [a-zA-Z0-9_]
\b : word boundary (앞뒤)
\b<egex>\b
 \<앞 \> 뒤
\B ell
\s whitespace (space, tab)

#2. ed
 - 텍스트 에디터(줄 에디터)
 - 정규표현식을 표현함 
 - line-oriented text editor
 - 인터렉티브형 (상호작용을 함)
 - format : ed file 
 - s : 치환 (a -> b) 하라
  [address][명령][정규식]

  1,$s/a/b/
  // s는 대체라는 의미 
  // 1,$는 1번째 line 부터 마지막 line까지 라는 의미
  --> a를 b로 대체하라 
  print 해야함
   # 1,$s/the/XXX/ # the를 XXX로 치환하자 (바꾸자)
   # 1,$p (프린트)
   --> 1번째 라인부터 마지막 라인 까지 프린트해라
   -----------------
   # 1,$s/[a-z]/g #g를 붙이면 global(=전체 라는 의미..?, 파일이 여러개일 수도 있으니까 flag를 붙이는 것이 좋다.) (flag)

   Q2. 모든 파일에서 모음으로 지우기
    : 1,$s/[aeiou]//g (// 는 삭제)
    (crel+d 두번 누르거나 ctrl+c누르면 나갈 수 있음)

#3. sed (파일저장)
 - stream editor
 - 표준 입출력 사용 가능, 파이프라인 사용 가능
 - 인터렉티브 (x) (상호작용을 하지 않음)
 - 단위 : 라인
 : sed 옵션 ed out_file

 Q3. animals.txt에서 phython -> PYTHON 변경 후 파일 전체 동일한 이름으로 저장하기
  : tr 'python' 'PYTHON' < animals.txt; tmp; mv tmp animals.txt
  : sed -i 's/python/PYTHON/g' animals.txt

##2) sed 실행하기
 - format : sed <script> <input_file> # > <out_file>

 Q4. hello -> world (파일 명 : file)
  : sed 's/hello/world/g' file
  : sed 's/hello/world/g' < file
  -----둘다 동일 
  : cat file | sed 's/hello/world/g' #파이프 라인으로 받을 수 있다.
   셋다 동일 

### -i option
 - 동일한 파일에 저장한다. = 수정한 내용 기존 파일에 덮어씌우기 (in-place)
 - 임시파일을 따로 저장하고 싶을 때 -iE #fileE --> -i<파일명>

### -n option (무조건 p랑 항상 사용)
 - p와 같이 사용하여 출력 범위를 지정한다.
- 패턴이 일치파는 라인만 출력 
   sed -n 'Zp' file
 - 5~10줄 출력하기
   sed -n '5,10p' file # ,가  range

  Q5. python이 있는 라인만 출력해줘  
   : sed -n '/python/p' file

   # ;(and) 으로 여러 정규식 연결 가능
   sed -n '1p ; $p' file
   -> sed -n '1p' file
   -> sed ',$p' file
   sed -n '1p ; $p' fileA fileB fileC
   cat fileA fileB fileC | sed -n '1p ; $p'

### -e, -f (정규 표현식과 파일을 알려주는 것)
 -e : expression
 ---> 스크립트 옵션을 사용한다
 -f : file
 ----> 파일 안에 스크립트를 작성하여 사용한다.
 sed -e '1p ; $p' -f file
  - 옵션이 없으면 1번째가 정규표현식, 2번째가 입력 파일

  ---> 

sed <option> <script> <input_file> # full format

#3) script
 - format : <address><cmd><options>
  '2p'
  - adress : 2 (범위)
  - cmd : p (명령,코멘드)
  - 5,10p 
  -'3d'

  Q6. input_file에서 python으로 시작하는 라인 삭제하고, hello->world로 변경한 뒤, out_file에 저장하라
   : sed '/^python/d ; s/hello/world/g' input_file > out_file
    : sed -e '/^pythond/d' -e 's/hello/world/g' input_file > out_file

  Q7.
  1) 5번째 줄 출력
  2) python, Python 포함 줄 삭제
  3) 처음 10개 줄 중 2번 실행
  4) 각 줄에 첫 3글자 삭세

  s'/python/g'
  - p(프린트), d(삭제), s(대체), q (quit,종료)

  ## cmd 's' (연습 많이 하세요)
   - format : s/regex/replacement/flag
   - g (global)
   - p : 해당 부분 프린트
   - i : 대소문자 구분 없음

 Q8. image.jpg.1, image.jpg.2, image.jpg.3
  >> image1.jpg, image2.jpg, image3.jpg
 : sed s//(/)//g

### addresss
 - 범위 지정
  '2p'
  sed '16s/a/b/' file
  sed '/apple/s///' file # apple에서 있는 부분에서 뭔가를 하는
  sed '/apple/!s///' file #! : not

  sed '160,200s/a/b/' (범위) 
  sed '160,2s/a/b/' # 160만 수행하고 끝
  $
  1,$~2 # step==2

  # 스크립트 작성 (중간고사***)
  - 파일에 커맨드라인 입력
  - 모드 변경한다.
    chmod +x file

    #1. 주석
   (여기는 주석이 아님)
    echo 1번 문제 답?

  - 실행
   name 
   ./name (현재 디렉토리에서 name 파일)
  - 주석 #로 단다.
   - 라인 단위
