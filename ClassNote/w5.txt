#0. 캐럿을 이용한 히스토리 확장
md5sum *.jp | ... | ...

^jp^jpg (jp를 jpg로 바꾸어 쓸 수 있음)
<패턴>:s/from_cmd/to_cmd
!!:s/jp/jpg
!md5sum/jp/jpg

#1. 총정리
## programs

- <프로그램> <옵션> <인수>
- ch
- 디렉토리, ...
- ex) ls -l /etc/passwd

1) date (프롬프트에 그냥 입력)
- 날짜를 표시하는 명령

2) who (그냥 입력)
- 리플릿에서는 설정이 다르게 되어 있어서 안뜸
- usrs/your_name 이렇게 뜸
- 로그인을 한 유저의 정보가 뜸

3) echo
- 뒤에 나오는 내용을 프린트함
- 공백이 아무리 많아도 개의치 않고, 같은 간격으로 출력됨 
##echo를 사용할 때는 $변수
$HOME, $USER -> printenv HOME, printenv USER

4) ls
- 파일 디렉토리를 리스트로 화면에 나타나게 하는 것
- 조회
- 옵션 : -l - 자세히 
         -d : directory
         - -
         - ......
      : -a - 숨겨진 것까지 자세히
        - 멀티컬럼으로 stdout
        - 인수가 디렉토리
        - 인수로 파일명 쓰면 그 이름 그대로 변환

5) cat + 파일 1,2, ....n
  -> 파일 내용 전체 출력 
  -> 파일 여러개 출력 cat 파일1 파일2 파일3 ...(이형식대로)
   - concatenate
   - 인수로 파일명
   - 파일 이어붙이기 가능 (커넨츠 확장할 때 사용한다.)
   - 리다이렉션때 많이 사용
    0. 리다이렉션이란?
     - 입력을 파일에서 하거나, 출력값을 화면이 아닌 파일로 보내, 저장하는 것 처럼, 입출력의 방향을 바꾸는 것
    1. 입력 리다이렉션
     - 키보드 대신 파일로 입력받아 명령을 실행시키는 것
     - < 
    2. 출력 리다이렉션
     - 출력 값을 화면이 아닌 파일로 보내 저장하는 것
     - > : 파일이 없으면 새로 생성하고, 파일 안에 내용이 있으면 그 위에 덮어씌우는 기능 (복사)
     - >> : 파일이 없으면 새로 생성하고, 파일 안의 내용 뒤에 이어쓰기 (추가)
     - & : 오류를 리다이렉션과 함께 생성하고 싶을 때
     - ! : 파일의 유무와 상관 없이 파일을 생성
     >&!
    3. 리다이렉션이 불가능한 경우
    - 표준 오류
    : 2>, 2>> 

    */는 일부를 지정해서 무효화 기능을 하고, 특히 별명울 무효화, 줄바꾸기 기능


6) wc
 - 라인, 단어, 글자 수 세기
 - 옵션 : -l, -w, -c
 - wc -l 하고 내가 원하는 것 셀에 입력한 다음, Ctrl+d 하면 내가 셀에 입력한 내용에 대한  wc가 실행됨

7) cp
 - copy from A to B
 - 다른 디렉토리일 경우
 - cp [복사대상] [새파일명] 
  : 파일을 복사해 새로운 파일 생성 가능
 - cp [복사대상] [디렉토리명]
  : 파일을 디렉토리 안에 복사 가능 
  - 상대경로로 쓰는 게 편함 (./로 시작) 
  - 같은 파일명일 경우 이름 안 써도 됨
   ex) cp b ./notes
  - 여러 파일 복사 가능
   cp 1 2 3 4 5 6 
   1-5 form, 6 to

Q1. OSS에서 notes/b를 현재 디렉토리로 복사해서 가져오는 코드 작성하기
(pwd)
 runner
 ㄴOSS
  ㄴnotes
   ㄴb
 : cp ./OSS/notes/b .

8) mv
 - move
 - mv from A to B (다른 디렉토리 -> 파일/디렉토리 이동)
  mv 1 2 3 4 5 "6"
  - mv file1 file2 file3 /dir1
 - 파일명을 변경할 때 사용 (*같은 디렉토리내에서 파일이동시-> 이름변경의 효과!)
  mv a aa # a 사라지고 aa #
 - 디렉토리 A -> B
  : sample에 있는 것을 notes로 보낸다고 했을 때
   : mv sample notes (복사가 아닌 이동)
   : ls notes
   : ls notes/sample
*** 기존에 존재하는 파일명일 경우, 덮어쓴다.
**** 디렉토리는 / 쓰기!!!

9) rm
 - remove
 - 파일명, 디렉토리
  **rmdir과 차이점 : rmdir은 빈 디렉토리만 가능
   - 강제로 가득찬 디렉토리 자체를 지우고 싶을 때에는 옵션 -r 사용하기
    rm -r
  - 여러 개 지울 수 있음 
   rm a b c d
   rm *.txt
  - 지울 때에는 복원이 불가능 하므로, 여러번 확인하고 지워야 함

  ## 디렉토리 관련 명령 
  1) pwd (절대경로 출력)
  - print woking directory 
  - current directory
  -> 현재 디렉토리의 절대경로 출력 

  2) cd
  - change directory 
  - .. (상위 디렉토리)
  - .  (하위 디렉토리)
  - cd (디폴트 값이 home, home으로 감)

  Q2. notes에서 runner로 한번에 가는 방법
   : cd ../..

  3) mkdir
  - make directory

  4) rmdir
  - remove directory
  *empty 만 가능*

  5) ln (Hard Link) 
  - link files
  - ln [대상파일] [하드링크파일]
  - ln from A from B
  - a, b를 항상 동기화 시키고 싶을 때 사용
  --> 두 파일은 같은 노드 번호를 공유함 == 두 파일이 동기화 되어 동일한 파일로 취급됨  
  - 메모리 효율, 항상 동기화 됨
  - 다른 디렉토리에 동일한 파일을 위치시키고 싶을 때
  - ls -l로 확인 가능함 (숫자가 2이면, 링크드 된 파일이 존재한다는 의미)
  - 파일 하나를 삭제해도 다른 파일은 삭제되지 않는다.
  -> 원본 파일이 삭제돼도, 원본과 동일한 내용의 파일을 가지고 있으므로, 자원을 공유하면서도 데이터를 안전하게 관리하고자 할 때 주로 사용됨 

 ## 패턴매칭
 1. asterisk
  - "*"
   : zero or more
    cat * # 현재 디렉토리에 있는 모든 파일
    chapter* # chapter로 시작하는 모든 파일
    Q. t가 들어있는 모든 파일
     : *t*
 2. ?
  - 한 개 매칭
   echo ? # 글자 1개로 된 파일 전부
   echo ?? # bb(가능) bb.txt(불가능)

 3. [, ] 
  - 특정 글자 1개 매칭되는 것 전부
   [abcd]
   [02468] #짝수
   [0-9] #0부터 9까지
   [a-z] #소문자 a부터 z까지

 Q3. o를 제외한 모든 소문자
  : [a-np-z]
    [!o] #!는 except라는 의미이므로 o제외라는 의미

 4. escape letter
  - 공백, $, ...
  - \
   : 별명 무효화
   : 줄 바꿈
   : 일부분을 지정해서 무효화 하는 역할 
   cat fail_a file b
   cat hello\ world
   '', "" (작은 따옴표와 큰 따옴표를 어떻게 구분해서 써야 할까용....???)

  - echo는 예외

 Q4. 'who are you?'라는 디렉토리를 생성하고 목록 조회하는 코드
  : 

    mkdir "who are you?"
    ls -l 'who are you?'
    ls -l "who are you?"
    ls -l who\ are\ you? 
    (뒤에 공백이 있으면 하나 하나의 인수로 인식하므로, 인수가 아닌 것으로 보기 위해서 띄어쓰기 앞에 \를 붙임)

## 리다이렉션
 - 파일에서 입출력을 하는 것
 - 입력 <
 - 출력 >
 - 에러 2
 - 표준 출력과 표준 에러는 다른 경로이다.
  - "" > cp_pattern1

## 파이프라인
 - | 
 - 표준 입추력을 이용하는 모든 프로그램은 파이프(파이프라인)를 사용할 수 있다.
 - A | B | ...
 - "필터" : 파이프라인을 사용할 수 있는 프로그램들 중에서 입출력 값을 수정할 수 있는 프로그램
   -> ex) grep, cut ... (입출력 값 수정 가능)

## 
  -; : 여러 명령 한 줄에 쓸 때
  - date; pwd 
  (파이프 라인이 아닌, date를 실행하고, 그다음에 pwd 실행하는 것인데 한 줄에 명령을 쓰고 싶을 때, 파이프 라인 처럼 전 명령의 출력이 후 명령의 입력이 되고 그런거 아님)

  - 오래 걸리는 명령 백그라운드로 보내기?????
   - <명령> &
   - 다른 프로그램 동시에 수행가능
   - stdin (조심)

  - ps 
   - 프로세스 정보를 나타냄
   - PID: id
   - PID는 프로그램이 돌아가는 시간
    (어떠한 정보를 알고 싶을 때 사용)
   - TTY: 터미널 정보
   - time: 구동 시간
   - cmd: 프로세스 이름

## 명령2
1. cut
 - cut <> 파일명
 - 옵션: -c, -f, -d
 - -c2,5,6
 - -f: tab구분 (defalut)
Q5. 10번째 글자부터 끝까지
 : cut -c10-

 - -d <구분자>
  - -d: 
    cut -d: -f1 file (옵션 -d를 사용하여 구분자를 따로 지정하지 않았을 때에는 default 값이 tab)

2. paste ??
 - vs cat 
  : paste는 라인 바이 라인 (가로에 붙임) , cat는 한줄씩 붙임 (세로에 붙임)
 - 컬럼별로 데이터 붙임
 - 디폴트는 탭
 - -d<구분자> : 구분자 지정
 - -s: 같은 파일을 수정할 경우
 ' ' -> \t
   paste -s -d' ' file
   (?같은 파일에서 수행을 한다?)

3. grep
 - grep <패턴> <디렉토리>
 - 패턴에 매칭되는 문자열을 가진 라인 출력
 - 매칭 없으면 아무것도 출력되지 않는다
   grep 'Linux' * # 대상 : 파일 내부의 텍스트
   .... | grep 'Linux' * # 출력에서 받은 입력값
Q6. 전체 파일에서 *패턴 가진 것 찾기
 : grep \* * (왜 안될까용?)
 => grep \'*'*.* (이거 아닌감.?>?>?.)

 => 패턴은 ''를 사용하는 게 좋다
 [a-z]
 ^, $
 ^[A-Z]*
 *.txt$

 -i : 대소문자 구분 안함
 -w : 정확한 매칭만 (단어로 읽을때)
  the -> there (x)
 -v : 반대, 포함 안되는  
 -l : 해당 매칭이 있는 파일명만 알 고 싶을 때 사용
 -n : 라인 넘버 같이 출력

Q7. 해당 매칭(A)이 있는 파일 개수 
 : grep -l 'A' * | wc -l

4. sort
 - 정렬
 - 라인별로, 오름차순 디폴트
 - -r
 - -n : 숫자로인식
  - 셸은 모든 인수를 문자열로 인식한다.
    str : 1, 11, 2, 3
    int : 1, 2, 3, 11
 - 특수 문자, 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의
 - ' ' # 32로 치환되고,,,,, \
 - -u : sort + uniq (uniq는 인접한 것 끼리만 중복으로 묶기 때문에 깔끔한 결과 값을 위해서는 같은 문자 끼리 인접하게 있도록 무조건 정렬을 하고 그 다음에 uniq 해야함)
 - o :
   sort file1 > file1 (x)
   - 정렬된 결과물 같은 파일에 저장 

5. uniq
 - 중복 삭제
 - 인접한 것만 고려한다
 - -d:  결과 중 중복된 것 삭제
 - -c : 중복된 횟수 카운트 

6. tr (trade character)
 - tr from_char to_char
 - tr e x file < input 
 - stdin만 가능함
 - 나가기 : Ctrl+d
 -d: 삭제
 (tr -d the : the를 삭제하는 코드)

Q8. animals.txt에서 e를 x로 바꾸고 싶을땐?
: tr 'e' 'x' < animals.txt

Q9. animals.txt에서 소문자를 대문자로 바꾸고 싶을땐?
: tr '[a-z]' '[A-Z]' < animals.txt 


*********중간 고사************
-> cmd(터미널 이용)만 가능
-> 생각 없이 답을 할 수 있을 정도로
-> 모든 것을 하나의 셸 파일에 다 입력해서 한번에 파일 제출
-> 그 파일 자체를 돌렸는데 원하는 값이 출력 되지 않으면 까임
-> 파일 제출 방법은 과제란에 올릴 것임 
-> 제출 파일 만들 때 확장자 틀리면 걍 감점 
-> 적어도 60문제
-> git도 시험문제
*****************************

