R1. 알파벳 중복없이 정렬해서 출력하는 코드 보내기
 : sort grades | uniq != cut -f1 grades | sort | uniq

R2. sort vs sort -n
 1, 11, 111, 2 (sort)
 1, 2, 11, 111 (sort -n)

3. git
- 여러 파일을 한꺼번에 스테이징하기
 : git add . (.은 옵션 모두 모든 변경사항을 반영한다는 의미)
- git commit -> txt 
  (깃의 의미있는 수정 작업이 끝났을 때 마침을 알리는 작업)
  git commit -m "your msg"
  (-m은 명령어의 다음 부분을 메세지로 남긴다는 뜻)
  => your msg 메모를 적고 커밋 (완료)
- 매 수업에 커밋으로 파일을 저장하는 연습히가
  => add로 모든 파일을 tracked하게 만든 뒤, your msg 메모를 적고 커밋 (스테이징 완료)
  * 항상 add 하고 메세지 남겨서 커밋해야함 *

4. 문서 편집기 (파일을 열고 수정할 때 하는 것)
- vi, vim, emacs, notepad ++, ...
- "vi"sual editor
 - vim - vi improved
- 프롬포트에서 파일을 직접 편집할 수 있게 해주는 툴
- 특징
 - 화면 단위 편집기
 - 유닉스 계열에서 가장 많이 사용함 
 - 텍스트 편집 기능만 제공함
 - "less"
 - 모드 : 일반모드 <-> 입력모드 <-> 명령모드
  - ESC로 모드 전환
  - 명령모드 : 파일 저장, 덮어쓸건지, 빠져나갈건지 등
   => vi로 파일 열기 -> 입력모드 -> ESC -> 빠져나가기 (:q!)
  - 입력모드: (옵션이 아님, -가 필요 없음)
   - i: 현 커서에서 입력
   - a: 현 커서 한 칸 뒤에서 입력
   - o: 한 줄 추가 후 입력 
  - 명령모드
   ':wq' (wirte and quite = 쓰고 끝내겠다) + enter
   ':wq!' (w = 쓴 것을 저장하고 강제(!) 종료(q) (강제성이 있음))

Q1. 파일 아무거나 열어서 수정하고 저장하고 나오기   
 - vi 설정하기 (설정 안하고 vim을 사용해도 됨) 
  : set -o vi (한번만 설정하면 안해도 됨)
 - vim 라인에서 엔터
 - vi 빠져나가기
  : ':q!'

-----------------------

5. 패턴 매칭
 - 프롬 포트에서 셀, 프로그램이 작동한다.
  grep Linux smaple.txt

 - 프롬프트 vs 셀 
  : 프롬프트는 우리가 명령을 실행하는 곳
  : 셀은 사용자와 리눅스 운영체제를 연결해주는 매개체

 리눅스 - 셀, 프롬프트 - 사용자
  - 셀의 역할은 명령 실행, 와일드카드 처리한다.

 grep Linux *.txt
  : *.txt -> sample.txt, a.txt, ....
  - 셀이 패턴매칭을 처리하여 결과물을 프로그램에 보낸다.
  - head xxx | grep | ....

  - *
   - zero or more
   - *.txt : .txt, animals.txt, a.txtt
   - 0개 이상의 연속열과 일치하는
   - 매칭되는 모든 문자를 나타내는 특수 문자로 쉘에서 *는 0개 이상의 문자로 대체

  - ?
   - 1개 매칭
     ch1 ch2 ch3 ... ch100
     grep Linux ch? #한자리수만 매칭

 - [ ]
   - 대괄호 안에 열겨되어 있는 것 중 일치하는 문자열 1개 있을 떄
     grep Linux ch[12345] # 12 (x) 123(x)
     grep Linux ch[1-5]

Q2. 짝수로 끝나는 모든 파일
 : grep Linux ch*[02468]

Q3. 대문자로 시작하고, 언더스코어 포함되어 있는 파이썬 파일 매칭
  : grep Linux ch[A-Z]*_*.py 

Q4. /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회하기
 : ls -l /etc *.conf
 (와일드 카드가 패턴매칭이므로 grep 자체가 필요가 없음)
 - 매칭되는 파일이 없으면 에러
  : ls *.doc
 - 디렉토리 경로, 파일명 

6. 변수 평가
- "평가" : 변수를 리터럴 값으로 치환하여 값을 평가함

$VAR - 이미 지정된 변수
$var - 사용자가 지정하는 변수
 ls $var
  -> var=./notes/w3.txt
 ls ./notes/w3.txt

 - $HOME - 루트 디렉터리
 - $USER - 사용자명

  (와일드 카드를 변경하는 것을 쉘이 하고, 변수를 변경하는 것 또한 쉘이 함)
 - echo
 - printenv

- 변수 설정하기
 name=lee
  - 공백이 없어야 함
  - 공백이 생기면 프로그램으로 인식하므로
  - 변수=값(처음 설정할때, 달러 싸인 없음)
  - 설정한 변수를 사용하려면 앞에 "$변수명"

Q5. age라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다" 변수를 이용해서 출력한다.
 : age=23
   my age is $age

- dir1=$HOME/notes/chapter1/
 : HOME에서 시작해서 notes가 있고, chapter1이 시작도미
 $dir1
 - cd $dir1

7. 패턴과 변수
 mammals
  ㄴ lizard.txt
  ㄴ snake.txt
reptles

Q6. mv <from> <to> 를 
 - 변수에 담아서 이동시키려면?
  dir1=mammals/*.txt
  mv $dir1 reptiles
---------------------(X)
  dir2 ="lizard.txt snake.txt"
  mv $dir2 reptile
- 따옴표 안에 있는 텍스트 파일을 하나 하나 인식하는 것이 아니라 통째로 인식하므로 안됨

 - 패턴 매칭으로 이동시키려면?

 8. alias
  - 단축어를 별명으로 설정하기
  - alias uniqc="uniq-c"
  uniqc | ...
   - removeall="rm -r"
   - shadowing
     alias grep="grep Linux *.txt"
     alias ls="ls-l"

  - alias
  - unalias uniqc